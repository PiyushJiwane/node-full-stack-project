openapi: 3.0.0
info:
  title: Todo List Backend API
  description: This is the backend api for my first todo list project including frontend.
  version: 1.0.0
  contact:
    name: Piyush Jiwane
    email: jiwane@gmail.com
servers:
  - url: 'http://localhost:5000'
    description: This is the local server
paths:
  /todo/api/v1/login:
    post:
      description: login api
      summary: login api
      tags:
        - Login Controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jiwane@gmail.com
                password:
                  type: string
                  example: Piyush@123
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
  /todo/api/v1/forgetPassword:
    post:
      description: forgot password
      summary: forgot password
      tags:
        - Login Controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: jiwane@gmail.com
                password:
                  type: string
                  example: Piyush@123
                otp:
                  type: number
                  example: 1234
      responses:
        '200':
          description: Description
          content:
            application/json:
              schema:
                type: string
  '/todo/api/v1/updateUser/{userId}':
    put:
      description: update user data based on Id
      summary: update user data based on Id
      tags:
        - Login Controller
      parameters:
        - in: path
          name: userId
          required: true
          description: user id update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: jiwane1@gmail.com
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
  '/todo/api/v1/deleteUser/{userId}':
    delete:
      security:
        - bearerAuth: []
      description: Describe this route
      summary: Describe this route
      tags:
        - Login Controller
      parameters:
        - in: path
          name: userId
          required: true
          description: user id delete
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: string
  /todo/api/v1/checkUser:
    get:
      description: get the username
      summary: get the username
      tags:
        - Signup Controller
      parameters:
        - in: query
          name: email
          required: true
          description: description
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: string
  /todo/api/v1/otpValidation:
    get:
      description: otp validation api
      summary: otp validation api
      tags:
        - Signup Controller
      parameters:
        - in: query
          name: email
          required: true
          description: description
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: string
  /todo/api/v1/signup:
    post:
      description: signup api
      summary: signup api
      tags:
        - Signup Controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: piyush jiwane
                email:
                  type: string
                  example: jiwane@gmail.com
                password:
                  type: string
                  example: Piyush@123
                otp:
                  type: number
                  example: 1234
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: string
  '/todo/api/v1/todo/{userId}':
    get:
      description: get all the todo's created for a user
      summary: get all the todo's created for a user
      tags:
        - Todo Controller
      parameters:
        - in: path
          name: userId
          required: true
          description: user id to find the todo's created for a user
          schema:
            type: string
      responses:
        '200':
          description: Description
          content:
            application/json:
              schema:
                type: string
    post:
      description: save the todo data
      summary: save the todo data
      tags:
        - Todo Controller
      parameters:
        - in: path
          name: userId
          required: true
          description: user id to find the user
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Title
                desc:
                  type: string
                  example: Desc for the Title
      responses:
        '200':
          description: Description
          content:
            application/json:
              schema:
                type: string
  '/todo/api/v1/inActive/todo/{userId}':
    put:
      description: delete todo
      summary: delete todo
      tags:
        - Todo Controller
      parameters:
        - in: path
          name: userId
          required: true
          description: todo id which we want to delete
          schema:
            type: string
      responses:
        '200':
          description: Description
          content:
            application/json:
              schema:
                type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
